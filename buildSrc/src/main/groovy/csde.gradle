// Note, IntelliJ does not recognise the imported Java Classes, hence they are
// highlighted in Red. However, they are recognised in the gradle compilation.

import com.r3.csde.TestJavaClass
import com.r3.csde.CordaLifeCycleHelper
import com.r3.csde.ProjectContext
import com.r3.csde.DeployCPIsHelper
import com.r3.csde.BuildCPIHelper
import com.r3.csde.ProjectUtils
import com.r3.csde.CordaStatusQueries
import com.r3.csde.CreateAndRegisterVNodesHelper

plugins {
    id 'java-library'
    id 'groovy'
    id 'java'
}

configurations {
    combinedWorker{
        canBeConsumed = false
        canBeResolved= true
    }

    myPostgresJDBC {
        canBeConsumed = false
        canBeResolved = true
    }

    notaryServerCPB {
        canBeConsumed = false
        canBeResolved = true
    }
}

// Dependencies for supporting tools
dependencies {
    combinedWorker "net.corda:corda-combined-worker:$combinedWorkerVersion"
    myPostgresJDBC 'org.postgresql:postgresql:42.4.1'
    notaryServerCPB("com.r3.corda.notary.plugin.nonvalidating:notary-plugin-non-validating-server:$cordaNotaryPluginsVersion") {
        artifact {
            classifier = 'package'
            extension = 'cpb'
        }
    }

    implementation "org.codehaus.groovy:groovy-json:3.0.9"
}


def pluginGroupName = "CSDE"
def pluginImplGroupName = "other"
def cordaBinDir = System.getenv("CSDE_CORDA_BIN") ?: System.getProperty('user.home') + "/.corda/corda5"
def cordaCliBinDir =  System.getenv("CSDE_CORDA_CLI") ?:System.getProperty('user.home') + "/.corda/cli"
def cordaJDBCDir = cordaBinDir + "/jdbcDrivers"
def cordaNotaryServerDir = cordaBinDir + "/notaryserver"
def signingCertAlias="gradle-plugin-default-key"
// Get error if this is not a autotyped object
// def signingCertFName = "$rootDir/config/gradle-plugin-default-key.pem"
def signingCertFName = rootDir.toString() + "/config/gradle-plugin-default-key.pem"
def keystoreAlias = "my-signing-key"
def keystoreFName = devEnvWorkspace + "/signingkeys.pfx"
def keystoreCertFName = devEnvWorkspace + "/signingkey1.pem"
def combiWorkerPidCacheFile = devEnvWorkspace + "/CordaPID.dat"


// Need to read things from cordapp plugin
def appCpiName =  'cpi name'
def notaryCpiName =  'CSDE Notary Server CPI'

def projectContext = new ProjectContext(project,
        cordaClusterURL.toString(),
        cordaRpcUser,
        cordaRpcPasswd,
        devEnvWorkspace,
        // todo: why is this not obtained in the groovy def's abouve - its inconsistent.
        new String("${System.getProperty("java.home")}/bin"),
        dbContainerName,
        cordaJDBCDir,
        combiWorkerPidCacheFile,
        signingCertAlias,
        signingCertFName,
        keystoreAlias,
        keystoreFName,
        keystoreCertFName,
        appCpiName,
        notaryCpiName,
        devEnvWorkspace,
        cordaCliBinDir
)

def projectUtils = new ProjectUtils()

// todo: move create and register vnodes to separate helper

// todo investigate adding corda-cli to the class path then executing it directly - might not work as
// gradle has to set up the jar file, so its not their when you start.

// Todo: write a test flow runner helper function
// todo: Write a final output message which give the set up VNodes
// todo: question, is it possible to invoke the cli from java rather than gradle/ groovy
// todo: rename deployCPIsHelper
// todo: sort out the fully qualified class names in functions

// add proper logging, rather than reading Stdout

// todo: add test corda running task
// todo: terminate deploy Corda with a list of VNodes short hashes

def deployCPIsHelper = new DeployCPIsHelper(projectContext)

def testJavaClass = new TestJavaClass()



// CordaLifeCycle tasks

def cordaLifeCycle = new CordaLifeCycleHelper(projectContext)

tasks.register("startCorda") {
    group = pluginGroupName
    dependsOn('getDevCordaLite', 'getPostgresJDBC')
    doLast {
        mkdir devEnvWorkspace
        cordaLifeCycle.startCorda()
    }
}

tasks.register("stopCorda") {
    group = pluginGroupName
    doLast {
        cordaLifeCycle.stopCorda()
    }
}

tasks.register("getPostgresJDBC") {
    group = pluginImplGroupName
    doLast {
        copy {
            from configurations.myPostgresJDBC
            into "$cordaJDBCDir"
        }
    }
}

tasks.register("getDevCordaLite", Copy) {
    group = pluginImplGroupName
    from configurations.combinedWorker
    into cordaBinDir
}



// CordaStatusQueries

def cordaStatusQueries = new CordaStatusQueries(projectContext)


tasks.register('listVNodes') {
    group = pluginGroupName
    doLast {
        cordaStatusQueries.listVNodes()
    }
}

tasks.register('listCPIs') {
    group = pluginImplGroupName
    doLast {
        cordaStatusQueries.listCPIs()
    }
}


// Build CPI tasks

def buildCPIHelper = new BuildCPIHelper(projectContext)

tasks.register('projInit') {
    group = pluginImplGroupName
    doLast {
         mkdir devEnvWorkspace
    }
}


tasks.register("testJava") {
    group = pluginGroupName
    doLast {

    }
}

tasks.register("createGroupPolicy") {
    group = pluginImplGroupName
    dependsOn('projInit')
    doLast {
        buildCPIHelper.createGroupPolicy()
    }
}

tasks.register("getNotaryServerCPB", Copy) {
    group = pluginImplGroupName
    from configurations.notaryServerCPB
    into cordaNotaryServerDir
}

tasks.register('createKeystore') {
    group = pluginImplGroupName
    dependsOn('projInit')
    doLast {
        buildCPIHelper.createKeyStore()
    }
}

tasks.register('buildCPIs') {
    group = pluginGroupName
    dependsOn('build', 'createGroupPolicy', 'createKeystore', 'getNotaryServerCPB')

    doLast{
        // Application CPI
        def appCpiFile = buildDir.toString() + "/" + project.archivesBaseName + "-" + project.version + ".cpi"
        delete { delete appCpiFile }
        File srcDir
        srcDir = file('build/libs')

        // Create a file collection using a closure
        def appCollection = layout.files { srcDir.listFiles() }
        def appCpbs = appCollection.filter { it.getName().endsWith(".cpb") }

        println("appCpbs:")
        appCpbs.forEach {
            println(it)
        }

        javaexec {
            classpath = files("$cordaCliBinDir/corda-cli.jar")
            jvmArgs = ["-Dpf4j.pluginsDir=$cordaCliBinDir/plugins/"]
            args = ['package', 'create-cpi',
                    '--cpb', appCpbs.singleFile.absolutePath,
                    '--group-policy', "${devEnvWorkspace}/GroupPolicy.json",
                    '--cpi-name', appCpiName,
                    '--cpi-version', project.version,
                    '--file', appCpiFile,
                    '--keystore', "${devEnvWorkspace}/signingkeys.pfx",
                    '--storepass', 'keystore password',
                    '--key', 'my-signing-key' ]
        }

        // Notary CPI
        def notaryCpiFile = buildDir.toString() + "/" +
                notaryCpiName.replace(' ', '-').toLowerCase() + "-" + project.version + ".cpi"
        delete { delete notaryCpiFile }

        // Create a file collection using a closure
        def notaryCpbs = layout
                .files { file(cordaNotaryServerDir).listFiles() }
                .filter { it.getName().endsWith(".cpb") }

        println("notaryCpbs:")
        notaryCpbs.forEach {
            println(it)
        }
        javaexec {
            classpath = files("$cordaCliBinDir/corda-cli.jar")
            jvmArgs = ["-Dpf4j.pluginsDir=$cordaCliBinDir/plugins/"]
            args = ['package', 'create-cpi',
                    '--cpb', notaryCpbs.singleFile.absolutePath,
                    '--group-policy', "${devEnvWorkspace}/GroupPolicy.json",
                    '--cpi-name', notaryCpiName,
                    '--cpi-version', project.version,
                    '--file', notaryCpiFile,
                    '--keystore', "${devEnvWorkspace}/signingkeys.pfx",
                    '--storepass', 'keystore password',
                    '--key', 'my-signing-key' ]
        }
    }

}



// deploy CPI tasks

tasks.register("deployCPIs") {
    group = pluginImplGroupName
    dependsOn('buildCPIs')
    doLast {
        deployCPIsHelper.deployCPIs()
    }
}


// create and register Vnodes Tasks

def createAndRegisterVNodesHelper = new CreateAndRegisterVNodesHelper(projectContext)

tasks.register("createAndRegVNodes") {
    group = pluginImplGroupName
    dependsOn('deployCPIs')
    doLast {
        createAndRegisterVNodesHelper.createAndRegVNodes()
    }
}

// Empty task, just acts as the Task user entry point task.
tasks.register('deployCordapp') {
    group = pluginGroupName
    dependsOn("createAndRegVNodes")
}


