import static org.gradle.api.JavaVersion.VERSION_11


plugins {
    id 'org.jetbrains.kotlin.jvm'

    // Include the cordapp-cpb plugin. This automatically includes the cordapp-cpk plugin as well.
    // These extend existing build environment so that CPB and CPK files can be built.
    // This includes a CorDapp DSL that allows the developer to supply metadata for the CorDapp
    // required by Corda.
    id 'net.corda.plugins.cordapp-cpb'

    // Development Support tools
    // Plugin that provides gradle functions to download files from websites.
    id "de.undercouch.download" version "5.1.0"

}

group 'com.r3.hellocorda'
version '1.0-SNAPSHOT'

def javaVersion = VERSION_11

// The CordApp section.
// This is part of the DSL provided by the corda plugins to define metadata for our CorDapp.
// Each component of the CorDapp would get its own CorDapp section in the build.gradle file for the componentâ€™s
// subproject.
// This is required by the corda plugins to build the CorDapp.
cordapp {
    // "targetPlatformVersion" and "minimumPlatformVersion" are intended to specify the preferred
    // and earliest versions of the Corda platform that the CorDapp will run on respectively.
    // Enforced versioning has not implemented yet so we need to pass in a dummy value for now.
    // The platform version will correspond to and be roughly equivalent to the Corda API version.
    targetPlatformVersion platformVersion as Integer
    minimumPlatformVersion platformVersion as Integer

    // The cordapp section contains either a workflow or contract subsection depending on the type of component.
    // Declares the type and metadata of the CPK (this CPB has one CPK).
    workflow {
        name "ModuleNameHere"
        versionId 1
        vendor "VendorNameHere"
    }
}

// Declare the set of Kotlin compiler options we need to build a CorDapp.
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        allWarningsAsErrors = true

        // Specify the version of Kotlin that we are that we will be developing. 
        languageVersion = '1.7'
        // Specify the Kotlin libraries that code is compatible with
        apiVersion = '1.7'
        // Note that we Need to use a version of Kotlin that will be compatible with the Corda API.
        // Currently that is developed in Kotlin 1.7 so picking the same version ensures compatibility with that.

        // Specify the version of Java to target.
        jvmTarget = javaVersion

        // Needed for reflection to work correctly.
        javaParameters = true

        // -Xjvm-default determines how Kotlin supports default methods.
        // JetBrains currently recommends developers use -Xjvm-default=all
        // https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-default/
        freeCompilerArgs += [
                "-Xjvm-default=all"
        ]
    }
}

repositories {

    // Repository the provides kotlin-stdlib-jdk8-osgi created by R3.
    // Final location to be decided.
    maven {
        url = "$artifactoryContextUrl/corda-dependencies"
    }

    // Repository provides Corda 5 binaries that implement Corda-API.
    // These will be made publicly available.
    // Final location to be decided.
    // Repository subject to change
    maven {
        url = "$artifactoryContextUrl/corda-os-maven"
        credentials {
            username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
            password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
        }
    }

    // Provides the combined-worker Jars
    // These will be made publicly available.
    // Final location to be decided.
    maven {
        url = "$artifactoryContextUrl/corda-ent-maven-unstable-local"
        credentials {
            username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
            password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
        }
    }

    maven {
        url = "$artifactoryContextUrl/engineering-tools-maven-unstable"
        credentials {
            username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
            password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
        }
    }

    /*
    maven {
        url = "$artifactoryContextUrl/conclave-docker"
        credentials {
            username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
            password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
        }
    }

     */

    // Provides all other dependencies
    mavenCentral()

    // Testing libraries are temporarily published to MavenLocal
    mavenLocal()
}

// Declare dependencies for the modules we will use.
// A cordaProvided declaration is required for anything that we use that the Corda API provides.
// This is required to allow us to build CorDapp modules as OSGi bundles that CPI and CPB files are built on.
dependencies {
    // We need a version of kotlin-stdlib-jdk8 built as an OSGi bundle, this is "kotlin-stdlib-jdk8-osgi".
    // R3 builds kotlin-stdlib-jdk8-osgi from Kotlin's kotlin-stdlib-jdk8.
    // NB:
    //   Kotlin's kotlin-osgi-bundle does not provide all of the Kotlin API that is required,
    //   There is no kotlin-stdlib-jdk11, but one is not needed even though we are targetting Java 11.
    cordaProvided 'net.corda.kotlin:kotlin-stdlib-jdk8-osgi'

    // Declare a "platform" so that we use the correct set of dependency versions for the version of the
    // Corda API specified.
    cordaProvided platform("net.corda:corda-api:$cordaApiVersion")

    // If using transistive dependencies this will provide most of Corda-API: 
    // cordaProvided 'net.corda:corda-application'

    // Alternatively we can explicitly specify all our Corda-API dependencies:
    cordaProvided 'net.corda:corda-base'
    cordaProvided 'net.corda:corda-application'
    cordaProvided 'net.corda:corda-crypto'
    cordaProvided 'net.corda:corda-membership'
    cordaProvided 'net.corda:corda-persistence'
    cordaProvided 'net.corda:corda-serialization'

    // Not yet fully implemented:
    // cordaProvided 'net.corda:corda-ledger'

    // The CorDapp uses the slf4j logging framework. Corda-API provides this so we need a 'cordaProvided' declaration.
    cordaProvided 'org.slf4j:slf4j-api'

    // Dependencies Required By Test Tooling
    testImplementation "net.corda:library:$testUtilsVersion"

    // 3rd party libraries
    // Required
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

    // Optional but used by exmaple tests.
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrestVersion"

}


test {
    useJUnitPlatform()
}

// Support tooling
configurations {
    combinedWorker{
        canBeConsumed = false
        canBeResolved= true
    }

    cordaCli{
        canBeConsumed = false
        canBeResolved= true
    }

    cordaCliMgmPlugin {
        canBeConsumed = false
        canBeResolved = true
    }

    cordaCliPackagePlugin {
        canBeConsumed = false
        canBeResolved = true
    }

    myCordaCpb {
        canBeConsumed = false
    }

    //keystore {
    //    canBeConsumed = false
    //    canBeResolved = true
    //}
}

// Dependencies for supporting tools
dependencies {
    combinedWorker "net.corda:corda-combined-worker:$combinedWorkerVersion"
    cordaCli "net.corda.cli.host:corda-cli:$cordaCliVersion"
    cordaCliMgmPlugin "net.corda.cli:mgm:$cordaCliVersion"
    cordaCliPackagePlugin "net.corda.cli.deployment:package:$combinedWorkerVersion"
    //myCordaCpb project(path: ":", configuration: "cordaCPB")
    //myCordaCpb project(configuration: "cordaCPB")
    // keystore files('signingkeys.pfx') {
    //    builtBy('createKeystore')
    //}
}



// tasks.register("downloadCombinedWorkerLatest", Copy) {
tasks.register("getMiniCorda", Copy) {
    from configurations.combinedWorker
    into "${System.getProperty('user.home')}/.corda/corda5"
}

//def combiWorkerJar = "${System.getProperty('user.home')}/.corda/corda5/corda-combined-worker-5.0.0.0-beta-1659630320700.jar"
def combiWorkerJar = "${System.getProperty('user.home')}/.corda/corda5/corda-combined-worker-5.0.0.0-beta-1659630320700.jar"

//def CORDA_CLI_DIR = "${System.getProperty('user.home')}/.corda/corda5/corda-cli-plugin-host"
def CORDA_CLI_DIR = "${System.getProperty('user.home')}/.corda/corda5/corda-cli"
// def CORDA_CLI_JAR = "corda-cli-0.0.1-SNAPSHOT.jar"
def CORDA_CLI_JAR = "corda-cli-0.0.1-beta-1659584654941.jar"
def CORDA_CLI_JAR_DIR = "${CORDA_CLI_DIR}/app/build/libs"
//def CORDA_CLI_PLUGINS_DIR = "${CORDA_CLI_DIR}/build/plugins"
def CORDA_CLI_PLUGINS_DIR = "${CORDA_CLI_DIR}/plugins"

tasks.register('startMiniCorda', JavaExec) {
   jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005',
              '-Dco.paralleluniverse.fibers.verifyInstrumentation=true']
    classpath = files(combiWorkerJar)
    args  '--instanceId=0', '-mbus.busType=DATABASE',
          '-spassphrase=password', '-ssalt=salt', '-spassphrase=password', '-ssalt=salt',
            '-ddatabase.user=user', '-ddatabase.pass=password',
            '-ddatabase.jdbc.url=jdbc:postgresql://localhost:5432/cordacluster'
}

tasks.register("getCordaCli", Copy) {
    from configurations.cordaCli
    into "${System.getProperty('user.home')}/.corda/corda5/corda-cli"
}

tasks.register("getCordaCliMgmPlugin", Copy) {
    from configurations.cordaCliMgmPlugin
    into "${System.getProperty('user.home')}/.corda/corda5/corda-cli/plugins"
}


tasks.register("getCordaCliPackagePlugin", Copy) {
    from configurations.cordaCliPackagePlugin
    into "${System.getProperty('user.home')}/.corda/corda5/corda-cli/plugins"
}


tasks.register("createGroupPolicy", JavaExec) {
    //classpath = files("$CORDA_CLI_JAR_DIR/corda-cli-0.0.1-SNAPSHOT.jar")
    println("CORDA_CLI_PLUGINS_DIR=$CORDA_CLI_PLUGINS_DIR")
    classpath = files("$CORDA_CLI_DIR/$CORDA_CLI_JAR")
    jvmArgs = ["-Dpf4j.pluginsDir=$CORDA_CLI_PLUGINS_DIR"]
    standardOutput = new FileOutputStream("MyGroupPolicy.json")
    // List<String> myArgs = ["mgm", 'groupPolicy']
    LinkedList<String> myArgs = new LinkedList<String>()
    myArgs.add("mgm")
    myArgs.add("groupPolicy")
    def jsonFile = file("$rootDir/config/dev-net.json")
    def slurper = new groovy.json.JsonSlurper()
    def parsedJson = slurper.parseText(jsonFile.text)
    parsedJson.identities.forEach {
        myArgs.add("--name")
        myArgs.add(it)
    }

    myArgs.add("--endpoint-protocol=1")
    myArgs.add("--endpoint=http://localhost:1080")
    args myArgs
}

tasks.register('printCPB' ) {
    dependsOn('cpb')
    println("myCordaCpb=${configurations.myCordaCpb.files()}")
    println("cpb.outputs.files()=${cpb.outputs.files()}")
    println("assemble.outputs.files()=${assemble.outputs.files()}")

    // println(cpb.get().outputFile)
    //File cpbFile = file('build/libs/*.cpb')
    // inputs.files(myCordaCpb).withPropertyName('cpb').withPathSensitivity(PathSensitivity.RELATIVE)
    //println("${configurations.myCordaCpb.singleFile.absolutePath}")
    println("$buildDir/libs/")

    //println("cbp={$cpb.toString()}")
    //println("Cpb file=${cpbFile.absolutePath}")
}

tasks.register('createKeystore', Exec) {
    dependsOn('downloadFreeTsaCert')
    commandLine "keytool", "-genkey",
            "-alias", "my-signing-key",
            "-keystore", "signingkeys.pfx",
            "-storepass", "keystore password",
            "-dname", "cn=CPI Example - My Signing Key, o=CorpOrgCorp, c=GB",
            "-keyalg", "RSA",
            "-storetype", "pkcs12",
            "-validity", "4000"
}

tasks.register('addTsaCertToKeystore', Exec) {
    dependsOn ('createKeystore')
    commandLine "keytool", "-importcert",
            "-alias", "freetsa",
            "-keystore", "signingkeys.pfx",
            "-storepass", "keystore password",
            "-file", "cacert.pem",
            "-noprompt"
    //outputs.file("signingkeys.pfx")
}

tasks.register('createCPI', JavaExec) {
    dependsOn('cpb', 'createGroupPolicy', 'addTsaCertToKeystore')
    File srcDir
    srcDir = file('build/libs')

    // Create a file collection using a closure
    def collection = layout.files { srcDir.listFiles() }

    def cpbs = collection.filter { it.getName().endsWith(".cpb") }.each{ println it }
    println("single file = ${cpbs.singleFile.absolutePath}")
    classpath = files("$CORDA_CLI_JAR_DIR/corda-cli-0.0.1-SNAPSHOT.jar")
    jvmArgs = ["-Dpf4j.pluginsDir=$CORDA_CLI_PLUGINS_DIR"]
    args 'package', 'create',
         '--cpb', cpbs.singleFile.absolutePath,
         '--group-policy', 'MyGroupPolicy.json',
         '--keystore', 'signingkeys.pfx',
         '--storepass', 'keystore password',
         '--key', 'my-signing-key',
         '--tsa', 'https://freetsa.org/tsr',
         '--file', "${project.archivesBaseName}-${project.version}.cpi"
}

tasks.register('list') {
    dependsOn('cpb')
    File srcDir

    srcDir = file('build/libs')
    // Create a file collection using a closure
    def collection = layout.files { srcDir.listFiles() }

    println "Contents of $srcDir.name"
    def cpbs = collection.filter { it.getName().endsWith(".cpb") }.each{ println it }
    println("single file = ${cpbs.singleFile.absolutePath}")
}

tasks.register('downloadFreeTsaCert', Download) {
    src 'https://freetsa.org/files/cacert.pem'
    dest rootDir
    overwrite false
}

// This does not work
// Cannot get access to groovy.json

tasks.register('parseJson') {
     def jsonFile = file("$rootDir/config/dev-net.json")
     def slurper = new groovy.json.JsonSlurper()
     doLast {
         def parsedJson = slurper.parseText(jsonFile.text)
         println("${parsedJson.identities}")
     }
}

tasks.register('nameStuff') {
    println("${project.archivesBaseName}-${project.version}.cpi")
}


task demo {
    doLast {
        Authenticator.setDefault (new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication ("admin", "admin".toCharArray());
            }
        })
        def body = [user: "dummyUser"]
        def req = new URL('https://localhost:8888/').openConnection()

        req.setRequestMethod("POST")
        req.setRequestProperty("Content-Type", "application/json; charset=UTF-8")
        req.setDoOutput(true)
        req.getOutputStream().write(JsonOutput.toJson(body).getBytes("UTF-8"))
        logger.quiet "Status code: ${req.getResponseCode()}" // HTTP request done on first read
        def resp = new groovy.json.JsonSlurper().parseText(req.getInputStream().getText())
        logger.quiet "Response: ${resp}"
        println("Response: ${resp}")
    }
}