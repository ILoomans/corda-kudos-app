import static org.gradle.api.JavaVersion.VERSION_11

plugins {
    id 'org.jetbrains.kotlin.jvm'

    // (1)
    id 'net.corda.plugins.cordapp-cpb'


    // Support tools
    id "de.undercouch.download" version "5.1.0"
}

group 'net.cordapp.hellocorda'
version '1.0-SNAPSHOT'

def javaVersion = VERSION_11

// (2)
cordapp {
    // These are intended to specify the preferred version of Corda platform to run the CorDapp on and the
    // earliest version that the CorDapp will run on.
    // Currently mechanisms to enforce versioning have not been implemented so we need to pass in a dummy value for now.
    targetPlatformVersion platformVersion as Integer
    minimumPlatformVersion platformVersion as Integer

    // Declares the type and metadata of the CPK (this CPB has one CPK)
    workflow {
        name "ModuleNameHere"
        versionId 1
        vendor "VendorNameHere"
    }
}


// (3)
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        allWarningsAsErrors = true

        // Specify the version of Kotlin that we are that we will be developing. 
        languageVersion = '1.7'
        // Specify the Kotlin libraries that code is compatible with
        apiVersion = '1.7'
        // Need to use a version of Kotlin that will be compatible with the Corda API. 
	// Currently that is developed in Kotlin 1.7 so picking the same version ensures compatibility with that.

        // Specify the version of Java to target
        jvmTarget = javaVersion

        // Needed for reflection to work correctly.
        javaParameters = true

        // 
        freeCompilerArgs += [
                "-Xjvm-default=all"
        ]
    }
}

// (4)
repositories {

    // Needed for kotlin osgi bundles generated by us.
    // Will be published to MavenCentral for when we do the GA release
    maven {
        url = "$artifactoryContextUrl/corda-dependencies"
    }

    // Needed for current C5 binaries.
    // These will be published to MavenCentral when we do the GA release
    maven {
        url = "$artifactoryContextUrl/corda-os-maven"
        credentials {
            username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
            password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
        }
    }

    // Will be able to use MavenCentral when we release.
    // Needed for the combined-worker
    maven {
        url = "$artifactoryContextUrl/corda-ent-maven-unstable-local"
        credentials {
            username = findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME')
            password = findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_PASSWORD')
        }
    }

    // C5 Binaries should go here.
    mavenCentral()

    // Testing libraries are temporarily published to MavenLocal
    mavenLocal()
}

// (5)
dependencies {
    // We need to use kotlin stdlib built as an OSGi Bundle
    cordaProvided 'net.corda.kotlin:kotlin-stdlib-jdk8-osgi'
    cordaProvided platform("net.corda:corda-api:$cordaApiVersion")

    // If using transistive dependencies this will provide most of Corda-API: 
    // cordaProvided 'net.corda:corda-application'

    // Alternatively we can explicitly specify all our Corda-API dependencies:
    cordaProvided 'net.corda:corda-base'
    cordaProvided 'net.corda:corda-application'
    cordaProvided 'net.corda:corda-crypto'
    cordaProvided 'net.corda:corda-membership'
    cordaProvided 'net.corda:corda-persistence'
    cordaProvided 'net.corda:corda-serialization'

    // Not yet implemented
    // cordaProvided 'net.corda:corda-ledger'

    // If Corda-API uses a dependency it will provide it to the CorDapp.
    // The build will not work if define the same dependency as regular dependency instead.
    // We recommend using a logging library
    cordaProvided 'org.slf4j:slf4j-api'

    // Testing dependencies
    // Bring in the testing utlities.
    testImplementation "net.corda:library:$testUtilsVersion"
    // 3rd party tools
    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.hamcrest:hamcrest-library:$hamcrestVersion"
}

test {
    useJUnitPlatform()
}


// Support tooling


configurations {
    combinedWorker{
        canBeConsumed = false
        canBeResolved= true
    }

    cordaCli{
        canBeConsumed = false
        canBeResolved= true
    }
}

dependencies {
    combinedWorker "net.corda:corda-combined-worker:$combinedWorkerVersion"
    cordaCli "net.corda.cli.host:corda-cli:$cordaCliVersion"
}
// tasks.register("downloadCombinedWorkerLatest", Copy) {
tasks.register("getMiniCorda", Copy) {
    from configurations.combinedWorker
    into "$buildDir/downloadedDependencies"
}

/*
tasks.register("getCordaCli", Copy) {
    from configurations.cordaCli
    into "$buildDir/downloadedDependencies"
}
*/

// Want to build a CPI
// --- needs a GroupPolicy
// --- needs a cert from tsa.org (download)
// --- needs a keystore (can create with keytool from the JDK)
// --- 

tasks.register ('thing', Exec) {
    executable 'ls'
    args '-l', '-r', '-t'
}


/*
tasks.registser ('createCPI', Exec) {
   executable 

}
*/

tasks.register('showProjName') {
  println("Proj name=${rootProject.name}")
  println("rootDir=${rootDir}")
}

tasks.register('downloadFile', Download) {
    src 'https://freetsa.org/files/cacert.pem'
    dest buildDir
    overwrite false
}



